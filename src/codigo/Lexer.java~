// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/codigo/Lexer.flex

package codigo;
import static codigo.Tokens.*;


@SuppressWarnings("fallthrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\1\22\0\1\1\1\0"+
    "\1\4\4\0\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\12\12\15\2\12\1\16\1\17\1\20"+
    "\2\0\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\41\1\12\1\0\2\12\1\41\1\0"+
    "\4\41\1\52\25\41\1\53\1\0\1\54\7\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\6\3\1\4\2\3\25\5"+
    "\1\1\1\0\1\6\2\0\1\7\1\0\11\5\1\10"+
    "\5\5\1\10\1\5\1\10\21\5\1\0\1\2\1\11"+
    "\2\0\11\5\1\10\22\5\1\0\1\7\25\5\1\10"+
    "\220\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\55\0\u010e"+
    "\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de"+
    "\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546"+
    "\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\207\0\55\0\u0627\0\u0654"+
    "\0\u0681\0\u0195\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f"+
    "\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7"+
    "\0\u0924\0\u0384\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32"+
    "\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a"+
    "\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u05fa\0\55\0\55"+
    "\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3"+
    "\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3"+
    "\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u11ee"+
    "\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356"+
    "\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be"+
    "\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u12cf\0\u15cc\0\u15f9"+
    "\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761"+
    "\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9"+
    "\0\u18f6\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31"+
    "\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99"+
    "\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01"+
    "\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69"+
    "\0\u1e96\0\u1ec3\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1"+
    "\0\u1ffe\0\u202b\0\u2058\0\u2085\0\u20b2\0\u20df\0\u210c\0\u2139"+
    "\0\u2166\0\u2193\0\u21c0\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1"+
    "\0\u22ce\0\u22fb\0\u2328\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409"+
    "\0\u2436\0\u2463\0\u2490\0\u24bd\0\u24ea\0\u2517\0\u2544\0\u2571"+
    "\0\u259e\0\u25cb\0\u25f8\0\u2625\0\u2652\0\u267f\0\u26ac\0\u26d9"+
    "\0\u2706\0\u2733\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841"+
    "\0\u286e\0\u289b\0\u28c8\0\u28f5\0\u2922\0\u294f\0\u297c\0\u29a9"+
    "\0\u29d6\0\u2a03\0\u2a30\0\u2a5d\0\u2a8a\0\u2ab7\0\u2ae4\0\u2b11"+
    "\0\u2b3e\0\u2b6b\0\u2b98\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c\0\u2c79"+
    "\0\u2ca6\0\u2cd3\0\u2d00\0\u2d2d\0\u2d5a\0\u2d87\0\u2db4\0\u2de1"+
    "\0\u2e0e\0\u2e3b\0\u2e68\0\u2e95\0\u2ec2\0\u2eef";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\7\1\12\1\13\1\14\1\15\1\7\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\2\26\1\30\1\31\1\32\1\33\1\34\1\26"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\2\26"+
    "\1\44\1\2\56\0\2\3\52\0\2\45\1\0\1\45"+
    "\1\46\50\45\2\47\1\0\2\47\1\0\47\47\10\0"+
    "\1\50\54\0\1\7\55\0\1\7\56\0\1\7\56\0"+
    "\1\51\53\0\1\52\1\14\56\0\2\7\53\0\1\7"+
    "\52\0\1\53\3\0\1\26\1\54\13\26\1\55\3\26"+
    "\1\56\10\26\17\0\1\53\3\0\4\26\1\57\25\26"+
    "\17\0\1\53\3\0\1\60\15\26\1\61\13\26\17\0"+
    "\1\53\3\0\4\26\1\62\3\26\1\63\5\26\1\64"+
    "\13\26\17\0\1\53\3\0\13\26\1\60\1\26\1\55"+
    "\11\26\1\65\2\26\17\0\1\53\3\0\10\26\1\66"+
    "\5\26\1\67\5\26\1\70\5\26\17\0\1\53\3\0"+
    "\16\26\1\71\13\26\17\0\1\53\3\0\32\26\17\0"+
    "\1\53\3\0\5\26\1\72\6\26\1\73\1\74\14\26"+
    "\17\0\1\53\3\0\1\75\31\26\17\0\1\53\3\0"+
    "\16\26\1\55\13\26\17\0\1\53\3\0\10\26\1\76"+
    "\5\26\1\77\13\26\17\0\1\53\3\0\1\26\1\100"+
    "\3\26\1\72\13\26\1\72\10\26\17\0\1\53\3\0"+
    "\1\101\20\26\1\102\10\26\17\0\1\53\3\0\4\26"+
    "\1\103\25\26\17\0\1\53\3\0\4\26\1\77\2\26"+
    "\1\104\13\26\1\105\6\26\17\0\1\53\3\0\7\26"+
    "\1\106\6\26\1\72\11\26\1\107\1\26\17\0\1\53"+
    "\3\0\15\26\1\110\4\26\1\111\7\26\17\0\1\53"+
    "\3\0\1\112\7\26\1\113\21\26\17\0\1\53\3\0"+
    "\7\26\1\114\1\115\21\26\17\0\1\53\3\0\16\26"+
    "\1\112\13\26\2\0\54\116\1\117\5\0\1\120\47\0"+
    "\10\50\1\121\44\50\15\0\1\51\7\0\1\122\24\0"+
    "\1\122\17\0\1\53\3\0\32\123\17\0\1\53\3\0"+
    "\22\26\1\124\7\26\17\0\1\53\3\0\3\26\1\72"+
    "\26\26\17\0\1\53\3\0\21\26\1\125\10\26\17\0"+
    "\1\53\3\0\6\26\1\126\23\26\17\0\1\53\3\0"+
    "\22\26\1\127\7\26\17\0\1\53\3\0\15\26\1\130"+
    "\14\26\17\0\1\53\3\0\22\26\1\131\7\26\17\0"+
    "\1\53\3\0\25\26\1\72\4\26\17\0\1\53\3\0"+
    "\26\26\1\132\3\26\17\0\1\53\3\0\23\26\1\133"+
    "\6\26\17\0\1\53\3\0\13\26\1\127\16\26\17\0"+
    "\1\53\3\0\21\26\1\134\10\26\17\0\1\53\3\0"+
    "\15\26\1\135\14\26\17\0\1\53\3\0\23\26\1\136"+
    "\6\26\17\0\1\53\3\0\17\26\1\137\12\26\17\0"+
    "\1\53\3\0\13\26\1\140\7\26\1\141\6\26\17\0"+
    "\1\53\3\0\1\26\1\142\30\26\17\0\1\53\3\0"+
    "\13\26\1\72\16\26\17\0\1\53\3\0\23\26\1\72"+
    "\6\26\17\0\1\53\3\0\11\26\1\143\20\26\17\0"+
    "\1\53\3\0\2\26\1\144\27\26\17\0\1\53\3\0"+
    "\10\26\1\145\5\26\1\146\13\26\17\0\1\53\3\0"+
    "\2\26\1\147\14\26\1\150\12\26\17\0\1\53\3\0"+
    "\13\26\1\72\5\26\1\72\10\26\17\0\1\53\3\0"+
    "\21\26\1\151\10\26\17\0\1\53\3\0\4\26\1\152"+
    "\25\26\17\0\1\53\3\0\17\26\1\127\12\26\17\0"+
    "\1\53\3\0\10\26\1\77\12\26\1\153\6\26\17\0"+
    "\1\53\3\0\4\26\1\154\25\26\17\0\1\53\3\0"+
    "\21\26\1\72\10\26\17\0\1\53\3\0\21\26\1\155"+
    "\10\26\17\0\1\53\3\0\10\26\1\66\21\26\17\0"+
    "\1\53\3\0\23\26\1\156\6\26\2\0\7\50\1\117"+
    "\45\50\11\0\1\157\1\0\1\157\1\0\1\160\54\0"+
    "\1\161\3\0\32\123\17\0\1\53\3\0\16\26\1\162"+
    "\13\26\17\0\1\53\3\0\1\163\31\26\17\0\1\53"+
    "\3\0\10\26\1\152\21\26\17\0\1\53\3\0\4\26"+
    "\1\72\25\26\17\0\1\53\3\0\22\26\1\164\7\26"+
    "\17\0\1\53\3\0\23\26\1\165\6\26\17\0\1\53"+
    "\3\0\15\26\1\71\14\26\17\0\1\53\3\0\4\26"+
    "\1\166\25\26\17\0\1\53\3\0\26\26\1\167\3\26"+
    "\17\0\1\53\3\0\2\26\1\170\27\26\17\0\1\53"+
    "\3\0\16\26\1\72\13\26\17\0\1\53\3\0\13\26"+
    "\1\171\16\26\17\0\1\53\3\0\10\26\1\172\21\26"+
    "\17\0\1\53\3\0\4\26\1\173\25\26\17\0\1\53"+
    "\3\0\4\26\1\76\25\26\17\0\1\53\3\0\4\26"+
    "\1\174\25\26\17\0\1\53\3\0\12\26\1\175\17\26"+
    "\17\0\1\53\3\0\25\26\1\176\4\26\17\0\1\53"+
    "\3\0\2\26\1\177\27\26\17\0\1\53\3\0\16\26"+
    "\1\200\13\26\17\0\1\53\3\0\4\26\1\201\25\26"+
    "\17\0\1\53\3\0\10\26\1\202\21\26\17\0\1\53"+
    "\3\0\15\26\1\72\14\26\17\0\1\53\3\0\10\26"+
    "\1\76\21\26\17\0\1\53\3\0\22\26\1\72\7\26"+
    "\17\0\1\53\3\0\23\26\1\203\6\26\17\0\1\53"+
    "\3\0\7\26\1\72\22\26\17\0\1\160\54\0\1\161"+
    "\3\0\32\204\17\0\1\53\3\0\13\26\1\205\16\26"+
    "\17\0\1\53\3\0\30\26\1\72\1\26\17\0\1\53"+
    "\3\0\23\26\1\206\6\26\17\0\1\53\3\0\21\26"+
    "\1\207\10\26\17\0\1\53\3\0\21\26\1\210\10\26"+
    "\17\0\1\53\3\0\1\200\31\26\17\0\1\53\3\0"+
    "\23\26\1\211\6\26\17\0\1\53\3\0\4\26\1\212"+
    "\25\26\17\0\1\53\3\0\15\26\1\127\14\26\17\0"+
    "\1\53\3\0\21\26\1\213\10\26\17\0\1\53\3\0"+
    "\2\26\1\77\27\26\17\0\1\53\3\0\4\26\1\55"+
    "\25\26\17\0\1\53\3\0\1\214\31\26\17\0\1\53"+
    "\3\0\4\26\1\215\25\26\17\0\1\53\3\0\21\26"+
    "\1\55\10\26\17\0\1\53\3\0\1\77\31\26\17\0"+
    "\1\53\3\0\15\26\1\216\14\26\17\0\1\53\3\0"+
    "\24\26\1\217\5\26\17\0\1\220\3\0\32\204\17\0"+
    "\1\53\3\0\24\26\1\214\5\26\17\0\1\53\3\0"+
    "\24\26\1\221\5\26\17\0\1\53\3\0\15\26\1\217"+
    "\14\26\17\0\1\53\3\0\10\26\1\222\21\26\17\0"+
    "\1\53\3\0\14\26\1\223\15\26\17\0\1\53\3\0"+
    "\5\26\1\224\13\26\1\225\10\26\17\0\1\53\3\0"+
    "\23\26\1\127\6\26\17\0\1\53\3\0\3\26\1\226"+
    "\26\26\17\0\1\53\3\0\6\26\1\72\23\26\17\0"+
    "\1\53\3\0\1\76\31\26\17\0\1\220\3\0\32\227"+
    "\17\0\1\53\3\0\2\26\1\230\27\26\17\0\1\53"+
    "\3\0\16\26\1\152\13\26\17\0\1\53\3\0\4\26"+
    "\1\231\25\26\17\0\1\53\3\0\1\232\31\26\17\0"+
    "\1\53\3\0\24\26\1\233\5\26\17\0\1\53\3\0"+
    "\24\26\1\234\5\26\17\0\1\235\3\0\32\227\17\0"+
    "\1\53\3\0\23\26\1\43\6\26\17\0\1\53\3\0"+
    "\15\26\1\236\14\26\17\0\1\53\3\0\2\26\1\127"+
    "\27\26\17\0\1\53\3\0\17\26\1\77\12\26\17\0"+
    "\1\53\3\0\21\26\1\127\10\26\17\0\1\235\3\0"+
    "\32\237\17\0\1\53\3\0\23\26\1\240\6\26\17\0"+
    "\1\241\3\0\32\237\17\0\1\53\3\0\1\170\31\26"+
    "\17\0\1\241\3\0\32\242\17\0\1\243\3\0\32\242"+
    "\17\0\1\243\3\0\32\244\17\0\1\245\3\0\32\244"+
    "\17\0\1\245\3\0\32\246\17\0\1\247\3\0\32\246"+
    "\17\0\1\247\3\0\32\250\17\0\1\251\3\0\32\250"+
    "\17\0\1\251\3\0\32\252\17\0\1\253\3\0\32\252"+
    "\17\0\1\253\3\0\32\254\17\0\1\255\3\0\32\254"+
    "\17\0\1\255\3\0\32\256\17\0\1\257\3\0\32\256"+
    "\17\0\1\257\3\0\32\260\17\0\1\261\3\0\32\260"+
    "\17\0\1\261\3\0\32\262\17\0\1\263\3\0\32\262"+
    "\17\0\1\263\3\0\32\264\17\0\1\265\3\0\32\264"+
    "\17\0\1\265\3\0\32\266\17\0\1\267\3\0\32\266"+
    "\17\0\1\267\3\0\32\270\17\0\1\271\3\0\32\270"+
    "\17\0\1\271\3\0\32\272\17\0\1\273\3\0\32\272"+
    "\17\0\1\273\3\0\32\274\17\0\1\275\3\0\32\274"+
    "\17\0\1\275\3\0\32\276\17\0\1\277\3\0\32\276"+
    "\17\0\1\277\3\0\32\300\17\0\1\301\3\0\32\300"+
    "\17\0\1\301\3\0\32\302\17\0\1\303\3\0\32\302"+
    "\17\0\1\303\3\0\32\304\17\0\1\305\3\0\32\304"+
    "\17\0\1\305\3\0\32\306\17\0\1\307\3\0\32\306"+
    "\17\0\1\307\3\0\32\310\17\0\1\311\3\0\32\310"+
    "\17\0\1\311\3\0\32\312\17\0\1\313\3\0\32\312"+
    "\17\0\1\313\3\0\32\314\17\0\1\315\3\0\32\314"+
    "\17\0\1\315\3\0\32\316\17\0\1\317\3\0\32\316"+
    "\17\0\1\317\3\0\32\320\17\0\1\321\3\0\32\320"+
    "\17\0\1\321\3\0\32\322\17\0\1\323\3\0\32\322"+
    "\17\0\1\323\3\0\32\324\17\0\1\325\3\0\32\324"+
    "\17\0\1\325\3\0\32\326\17\0\1\327\3\0\32\326"+
    "\17\0\1\327\3\0\32\330\17\0\1\331\3\0\32\330"+
    "\17\0\1\331\3\0\32\332\17\0\1\333\3\0\32\332"+
    "\17\0\1\333\3\0\32\334\17\0\1\335\3\0\32\334"+
    "\17\0\1\335\3\0\32\336\17\0\1\337\3\0\32\336"+
    "\17\0\1\337\3\0\32\340\17\0\1\341\3\0\32\340"+
    "\17\0\1\341\3\0\32\342\17\0\1\343\3\0\32\342"+
    "\17\0\1\343\3\0\32\344\17\0\1\345\3\0\32\344"+
    "\17\0\1\345\3\0\32\346\17\0\1\347\3\0\32\346"+
    "\17\0\1\347\3\0\32\350\17\0\1\351\3\0\32\350"+
    "\17\0\1\351\3\0\32\352\17\0\1\353\3\0\32\352"+
    "\17\0\1\353\3\0\32\354\17\0\1\355\3\0\32\354"+
    "\17\0\1\355\3\0\32\356\17\0\1\357\3\0\32\356"+
    "\17\0\1\357\3\0\32\360\17\0\1\361\3\0\32\360"+
    "\17\0\1\361\3\0\32\362\17\0\1\363\3\0\32\362"+
    "\17\0\1\363\3\0\32\364\17\0\1\365\3\0\32\364"+
    "\17\0\1\365\3\0\32\366\17\0\1\367\3\0\32\366"+
    "\17\0\1\367\3\0\32\370\17\0\1\371\3\0\32\370"+
    "\17\0\1\371\3\0\32\372\17\0\1\373\3\0\32\372"+
    "\17\0\1\373\3\0\32\374\17\0\1\375\3\0\32\374"+
    "\17\0\1\375\3\0\32\376\17\0\1\377\3\0\32\376"+
    "\17\0\1\377\3\0\32\u0100\17\0\1\u0101\3\0\32\u0100"+
    "\17\0\1\u0101\3\0\32\u0102\17\0\1\u0103\3\0\32\u0102"+
    "\17\0\1\u0103\3\0\32\u0104\17\0\1\u0105\3\0\32\u0104"+
    "\17\0\1\u0105\3\0\32\u0106\17\0\1\u0107\3\0\32\u0106"+
    "\17\0\1\u0107\3\0\32\u0108\17\0\1\u0109\3\0\32\u0108"+
    "\17\0\1\u0109\3\0\32\u010a\17\0\1\u010b\3\0\32\u010a"+
    "\17\0\1\u010b\3\0\32\u010c\17\0\1\u010d\3\0\32\u010c"+
    "\17\0\1\u010d\3\0\32\u010e\17\0\1\u010f\3\0\32\u010e"+
    "\17\0\1\u010f\3\0\32\u0110\17\0\1\u0111\3\0\32\u0110"+
    "\17\0\1\u0111\3\0\32\u0112\17\0\1\u0113\3\0\32\u0112"+
    "\17\0\1\u0113\3\0\32\u0114\17\0\1\u0115\3\0\32\u0114"+
    "\17\0\1\u0115\3\0\32\u0116\23\0\32\u0116\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12060];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\35\1\1\0\1\11\2\0"+
    "\1\1\1\0\43\1\1\0\2\11\2\0\34\1\1\0"+
    "\247\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Tokens yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { lexeme = yytext();
    return ERROR;
            }
          // fall through
          case 10: break;
          case 2:
            { /*ignorar*/
            }
          // fall through
          case 11: break;
          case 3:
            { lexeme = yytext();
    return OPERADORES;
            }
          // fall through
          case 12: break;
          case 4:
            { lexeme = yytext();
    return ENTERO;
            }
          // fall through
          case 13: break;
          case 5:
            { lexeme = yytext();
    return IDENTIFICADOR;
            }
          // fall through
          case 14: break;
          case 6:
            { lexeme = yytext();
    return STRING;
            }
          // fall through
          case 15: break;
          case 7:
            { lexeme = yytext();
    return REAL;
            }
          // fall through
          case 16: break;
          case 8:
            { lexeme = yytext();
    return PALABRARESERVADA;
            }
          // fall through
          case 17: break;
          case 9:
            { lexeme = yytext();
    return CHAR;
            }
          // fall through
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
